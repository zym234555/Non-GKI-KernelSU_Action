name: Build Kernel New
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      target_device:
        description: '目标设备 (Target Device)'
        required: true
        default: 'pipa'
        type: choice
        options:
          - 'umi'
          - 'cmi'
          - 'cas'
          - 'thyme'
          - 'munch'
          - 'dagu'
          - 'elish'
          - 'enuma'
          - 'alioth'
          - 'apollo'
          - 'lmi'
          - 'psyche'
          - 'pipa'
          - 'All'

      compiled_system:
        description: '适用系统 (Compiled System)'
        required: true
        type: choice
        default: 'MIUI'
        options:
          - 'MIUI'
          - 'AOSP'
          - 'All'
        
      kernelsu_variant:
        description: 'KernelSU 变体 (KernelSU Variant)'
        required: true
        type: choice
        default: 'SukiSU-Ultra'
        options:
          - 'SukiSU-Ultra'
          - 'RKSU'
          - 'KernelSU'
          - 'None'

      build_type:
        description: '内核构建类型 (Build Type)'
        required: true
        type: choice
        default: 'Release'
        options:
          - 'Release'
          - 'Dev'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      KERNEL_ROOT: "/home/runner/work/kernel_xiaomi_sm8250_mod/kernel_xiaomi_sm8250_mod"
    steps:
      - name: 最大化构建空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          
      - name: 克隆内核源码
        run: |
          git clone https://github.com/utziacre/android_kernel_xiaomi_pipa.git -b rt kernel_platform
          cd kernel_platform
          git submodule update --init --recursive  # Initialize submodules if required
          
      - name: 安装依赖
        run: |
          sudo apt update
          sudo apt install -y \
            bc binutils-dev bison build-essential ca-certificates ccache cmake curl file flex \
            git libelf-dev libssl-dev make ninja-build python3-dev texinfo u-boot-tools xz-utils \
            zlib1g-dev libncurses-dev wget zip cpio python3 python3-pip tree gcc clang lld llvm

      - name: 配置 ccache
        run: |
          mkdir -p ~/.cache/ccache
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> $GITHUB_ENV
          
      - name: 从缓存恢复 ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ github.event.inputs.target_device }}-${{ github.event.inputs.compiled_system }}
          restore-keys: |
            ccache-${{ github.event.inputs.target_device }}-
            ccache-

      - name: 创建工具链目录
        run: |
          mkdir -p "$KERNEL_ROOT/kernel_platform/toolchain/clang"
            
      - name: 缓存工具链
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: ${{ env.KERNEL_ROOT }}/kernel_platform/toolchain
          key: toolchain-clang-r547379-gcc
          restore-keys: toolchain
            
      - name: 下载 Google Clang 工具链
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          cd "$KERNEL_ROOT/kernel_platform"
          mkdir -p toolchain/clang
          cd toolchain/clang
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang-r547379.tar.gz
          tar -xzf clang-r547379.tar.gz
          rm clang-r547379.tar.gz

      - name: 同步 LineageOS GCC 工具链
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          cd "$KERNEL_ROOT/kernel_platform"
          git submodule update --init --remote toolchain/gcc/gcc64
          git submodule update --init --remote toolchain/gcc/gcc32

      - name: 配置 KernelSU
        run: |
          cd "$KERNEL_ROOT/kernel_platform"

          KSU_VARIANT="${{ github.event.inputs.kernelsu_variant }}"

          if [ "$KSU_VARIANT" == "SukiSU-Ultra" ]; then
            echo "配置 KernelSU 变体: $KSU_VARIANT"
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/susfs-dev/kernel/setup.sh" | bash -s susfs-dev
          elif [ "$KSU_VARIANT" == "RKSU" ]; then
            echo "配置 KernelSU 变体: $KSU_VARIANT"
            curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/susfs-v1.5.5/kernel/setup.sh" | bash -s susfs-v1.5.5
          elif [ "$KSU_VARIANT" == "KernelSU" ]; then
            echo "配置 KernelSU 变体: $KSU_VARIANT"
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5
          else
            echo "KernelSU 已禁用"
          fi

      - name: 配置内核名称
        run: |
          cd "$KERNEL_ROOT/kernel_platform"
          sed -i '$s|echo "$res"|echo "-zym234555-utziacre-kpm"|' ./scripts/setlocalversion
          
      - name: 构建内核
        run: |
          cd "$KERNEL_ROOT/kernel_platform"

          # 设置环境变量
          export CCACHE=1
          export PATH="/usr/bin:$PATH"
          
          DEVICE="${{ github.event.inputs.target_device }}"
          SYSTEM="${{ github.event.inputs.compiled_system }}"
          KSU="${{ github.event.inputs.kernelsu_variant }}"
          
          # 检查不支持的选项
          if [ "$DEVICE" == "All" ]; then
              echo "抱歉，目前不支持为所有设备构建"
              exit 1
          fi
          
          if [ "$SYSTEM" == "All" ]; then
              echo "抱歉，目前不支持为所有系统构建"
              exit 1
          fi

          # 设置构建参数
          MAKE_ARGS="ARCH=arm64 SUBARCH=arm64 LLVM=1 LLVM_IAS=1 \
            CROSS_COMPILE=./toolchain/gcc/gcc64/aarch64-linux-android- \
            CROSS_COMPILE_COMPAT=./toolchain/gcc/gcc32/arm-linux-androideabi- \
            CROSS_COMPILE_ARM32=./toolchain/gcc/gcc32/arm-linux-androideabi- \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CC=clang CXX=clang++ HOSTCC=clang HOSTCXX=clang++ \
            LD=ld.lld HOSTLD=ld.lld \
            KCFLAGS=-Wno-error \
            O=out"

          # 生成设备配置
          echo "正在生成 ${DEVICE} 的配置..."
          make CCACHE=1 $MAKE_ARGS -j$(nproc --all) ${DEVICE}_defconfig

          # 根据系统类型修改配置
          if [ "$SYSTEM" == "MIUI" ]; then
              echo "应用 MIUI 特定配置..."
              scripts/config --file out/.config \
                  --set-str STATIC_USERMODEHELPER_PATH /system/bin/micd \
                  -e PERF_CRITICAL_RT_TASK \
                  -e SF_BINDER \
                  -e OVERLAY_FS \
                  -d DEBUG_FS \
                  -e MIGT \
                  -e MIGT_ENERGY_MODEL \
                  -e MIHW \
                  -e PACKAGE_RUNTIME_INFO \
                  -e BINDER_OPT \
                  -e KPERFEVENTS \
                  -e MILLET \
                  -e PERF_HUMANTASK \
                  -d LTO_CLANG \
                  -d LOCALVERSION_AUTO \
                  -e SF_BINDER \
                  -e XIAOMI_MIUI \
                  -d MI_MEMORY_SYSFS \
                  -e TASK_DELAY_ACCT \
                  -e MIUI_ZRAM_MEMORY_TRACKING \
                  -d CONFIG_MODULE_SIG_SHA512 \
                  -d CONFIG_MODULE_SIG_HASH \
                  -e MI_FRAGMENTION \
                  -e PERF_HELPER \
                  -e BOOTUP_RECLAIM \
                  -e MI_RECLAIM \
                  -e RTMM
          fi

          # 根据 KernelSU 变体修改配置
          if [ "$KSU" == "SukiSU-Ultra" ]; then
              echo "应用 SukiSU-Ultra 配置..."
              scripts/config --file out/.config \
                  -e KSU \
                  -e KPM \
                  -e KSU_SUSFS \
                  -e KSU_SUSFS_HAS_MAGIC_MOUNT \
                  -e KSU_SUSFS_SUS_PATH \
                  -e KSU_SUSFS_SUS_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT \
                  -e KSU_SUSFS_SUS_KSTAT \
                  -d KSU_SUSFS_SUS_OVERLAYFS \
                  -e KSU_SUSFS_TRY_UMOUNT \
                  -e KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT \
                  -e KSU_SUSFS_SPOOF_UNAME \
                  -e KSU_SUSFS_ENABLE_LOG \
                  -e KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS \
                  -e KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG \
                  -e KSU_SUSFS_OPEN_REDIRECT \
                  -d KSU_SUSFS_SUS_SU
          elif [ "$KSU" == "RKSU" ]; then
              echo "应用 RKSU 配置..."
              scripts/config --file out/.config \
                  -e KSU \
                  -e KSU_SUSFS \
                  -e KSU_SUSFS_HAS_MAGIC_MOUNT \
                  -e KSU_SUSFS_SUS_PATH \
                  -e KSU_SUSFS_SUS_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT \
                  -e KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT \
                  -e KSU_SUSFS_SUS_KSTAT \
                  -d KSU_SUSFS_SUS_OVERLAYFS \
                  -e KSU_SUSFS_TRY_UMOUNT \
                  -e KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT \
                  -e KSU_SUSFS_SPOOF_UNAME \
                  -e KSU_SUSFS_ENABLE_LOG \
                  -e KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS \
                  -e KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG \
                  -e KSU_SUSFS_OPEN_REDIRECT \
                  -d KSU_SUSFS_SUS_SU
          elif [ "$KSU" == "KernelSU" ]; then
              echo "应用 KernelSU 配置..."
              scripts/config --file out/.config -e KSU
          fi

          # 开始构建
          echo "开始构建内核..."
          make CCACHE=1 $MAKE_ARGS -j$(nproc --all)

          # 验证构建结果
          if [ -f "$KERNEL_ROOT/kernel_platform/out/arch/arm64/boot/Image" ]; then
              echo "✅ 构建成功"
          else
              echo "❌ 找不到 Image 文件，构建失败"
              exit 1
          fi
          
          # 显示 ccache 统计信息
          ccache --show-stats

      - name: KPM 修补 Image 文件
        run: |
          KSU_VARIANT="${{ github.event.inputs.kernelsu_variant }}"
          
          if [ "$KSU_VARIANT" == "SukiSU-Ultra" ]; then
            echo "正在修补 Image 文件..."
            cd "$KERNEL_ROOT/kernel_platform/out/arch/arm64/boot"
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
            chmod 777 patch
            ./patch
            rm -rf Image
            mv oImage Image
            echo "✅ Image 文件修补完成"
          fi

      - name: 打包内核到 AnyKernel3
        run: |
          # 定义变量
          DEVICE="${{ github.event.inputs.target_device }}"
          SYSTEM="${{ github.event.inputs.compiled_system }}"
          KSU="${{ github.event.inputs.kernelsu_variant }}"
          BUILD_TYPE="${{ github.event.inputs.build_type }}"
          BUILD_ID="${{ github.run_id }}"
          ZIP_NAME="${DEVICE}_${KSU}_${SYSTEM}_${BUILD_TYPE}_${BUILD_ID}.zip"
          
          # 创建目录并克隆 AnyKernel3
          mkdir -p "$KERNEL_ROOT/ak3_out"
          cd "$KERNEL_ROOT/ak3_out"
          git clone https://github.com/osm0sis/AnyKernel3.git --depth=1
          cd AnyKernel3
          
          # 删除不需要的文件
          rm -rf .git .github
          
          # 复制内核镜像
          cp "$KERNEL_ROOT/kernel_platform/out/arch/arm64/boot/Image" ./
          
          # 打包
          echo "正在创建刷机包: $ZIP_NAME"
          cd ..
          zip -r "$ZIP_NAME" AnyKernel3

      - name: 上传编译结果
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.target_device }}_${{ github.event.inputs.kernelsu_variant }}_${{ github.event.inputs.compiled_system }}_${{ github.event.inputs.build_type }}
          path: |
            ${{ env.KERNEL_ROOT }}/ak3_out/*.zip
            ${{ env.KERNEL_ROOT }}/kernel_platform/out/arch/arm64/boot/Image
      
      - name: 发布到 Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.KERNEL_ROOT }}/ak3_out/*.zip
            ${{ env.KERNEL_ROOT }}/kernel_platform/out/arch/arm64/boot/Image
          name: Kernel_${{ github.event.inputs.target_device }}_${{ github.event.inputs.kernelsu_variant }}_${{ github.event.inputs.compiled_system }}_${{ github.run_id }}
          tag_name: Kernel_${{ github.event.inputs.target_device }}_${{ github.event.inputs.kernelsu_variant }}_${{ github.event.inputs.compiled_system }}_${{ github.run_id }}
          body: |
            ----------------English----------------
            Target Device: ${{ github.event.inputs.target_device }}
            Compiled System: ${{ github.event.inputs.compiled_system }}
            KernelSU Variant: ${{ github.event.inputs.kernelsu_variant }}
            Build Type: ${{ github.event.inputs.build_type }}
            ------------------中文------------------
            目标机型: ${{ github.event.inputs.target_device }}
            适用系统: ${{ github.event.inputs.compiled_system }}
            KernelSU变体: ${{ github.event.inputs.kernelsu_variant }}
            构建类型: ${{ github.event.inputs.build_type }}
            ----------------------------------------
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
